//Begin page functions
float DistFromObj(float target[3], float who[3])
{   
    float dif[3];
    mathVecSubtract (dif,target,who,3);
    return mathVecMagnitude(dif,3);
}

bool isCloseTo(float target[3], float d) 
{
	float dif[3];
	mathVecSubtract (dif,target,myState,3);
	return (mathVecMagnitude (dif,3) < d);
}

bool CatchMemoryPack(float MmPk[3])
{ 
    bool Ok=false;
    api.setPositionTarget(MmPk);
    api.setAttRateTarget(stop);
    api.setTorques(stop);
    
	if(isCloseTo(MmPk,0.05)==true) 
	    {
		    if(mathVecNormalize(myState+3,3)>=vmax)
		        {   
		            api.setVelocityTarget(stop); 
		            CheckVel=0.0f; 
		        }
		    else CheckVel=1;
		        
		    if(CheckVel==1) Rotate();
	    }
	else CheckVel=0.0f; 

    if(game.hasMemoryPack(0,id)==true) Ok=true; 
    
	return Ok;
}

void Rotate()
{
	float att[3];	
	att[0]=att[1]=0.0f; 
	att[2]=18*PI/180;
	
	api.setAttRateTarget(att);
}


//End page functions
//Begin page init
ZRState myState;
int id;
int time;
float vmax;
float CheckVel;
float stop[3];

void init()
{
    time=0;
    vmax=0.01f;
    CheckVel=0.0f;
    memset(stop,0,3*sizeof(float));
}
//End page init
//Begin page main
void loop()
{
	api.getMyZRState(myState);
	
	if(time==0)
	{
	    id=0;//red
		if (myState[1]>0) 
			id=1;//blue
	}
	
	float MemoryPackPos[2][3]={{-0.5f,-0.6f,0.0f},{-0.5f,0.6f,0.0f}};
	
	if (CatchMemoryPack(MemoryPackPos[id])==true) api.setPositionTarget(stop);
	
	time++;
}
//End page main
