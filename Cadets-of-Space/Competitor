//Begin page functions
float distance(float *p1, float *p2)
{
	float diff[3];
	mathVecSubtract(diff,p1,p2,3);
	return mathVecMagnitude(diff,3);
}

float angle(float *a, float *b, float *c) 
{
    float side1[3], side2[3], cosine;
   
    for (int i=0; i<3; i++) side1[i]=a[i]-c[i];
    cosine=-mathVecMagnitude(side1,3)*mathVecMagnitude(side1,3);
   
    for (int i=0; i<3; i++) 
    {
        side1[i]=b[i]-a[i];
        side2[i]=c[i]-b[i];
    }
   
    cosine+=mathVecMagnitude(side1,3)*mathVecMagnitude(side1,3)+mathVecMagnitude(side2,3)*mathVecMagnitude(side2,3);   
    cosine/=2*mathVecMagnitude(side1,3)*mathVecMagnitude(side2,3);
    return acosf(cosine);
}

void mathVecProject(float *c, float *a, float *b, int n) 
{
    for (int i=0; i<n; i++) 
        c[i]=(mathVecInner(a,b,3)*b[i])/(mathVecMagnitude(b,3)*mathVecMagnitude(b,3));
}

void mathVecRotationXZ(float *a, float angle) 
{
	float xorg = a[0];
	a[0]=cosf(angle)*a[0]+sinf(angle)*a[2];
	a[2]=-sinf(angle)*xorg+cosf(angle)*a[2];
}

void mathVecRotateToOptimal(float *a) 
{
	a[2]=-sqrtf(a[0]*a[0]+a[2]*a[2]); 
	a[0]=0.0f;
	mathVecRotationXZ(a,0.1);
}

float minDistanceFromOrigin(float *target) 
{
	float temp[3] = {0,0,0};
	
	if (cosf(angle(temp,myState,target)) < 0) return mathVecMagnitude(myState,3);
	
	else if (cosf(angle(temp,target,myState)) < 0) return mathVecMagnitude(target,3);
	
	else {
	        mathVecSubtract(temp,target,myState,3);
	        mathVecProject(temp,myState,temp,3);
		    mathVecSubtract(temp,myState,temp,3);
		
		    return mathVecMagnitude(temp,3);
	     }
}

void setPositionTarget(float *target, float multiplier) 
{
	float myPos[3],meMag;
	for(int i=0; i<3; i++) myPos[i] = myState[i];
	
	meMag=mathVecMagnitude(myPos,3);
	
	if (minDistanceFromOrigin(target) > 0.34) api.setPositionTarget(target);
	else if (meMag >= 0.22 && meMag <= 0.34) 
	{
		for (int i=0; i<3; i++) 
		    myPos[i]*=1.4f; 
		
		api.setPositionTarget(myPos);
	}
	
	else {
	        float opposite[3];
		    float perpendicular[3];
		    float mePrep[3];
		    float path[3]; 
		    float temp[3];
		
	        mathVecProject(opposite,target,myPos,3);
		    mathVecSubtract(perpendicular,target,opposite,3);
		
		    for (int i = 0; i < 3; i++) 
		        mePrep[i]=perpendicular[i]/mathVecMagnitude(perpendicular,3);
		
		    for (int i = 0; i < 3; i++) 
			    mePrep[i]=(mePrep[i]*0.325*meMag)/(sqrtf(meMag*meMag - 0.34*0.34));
		
		    mathVecSubtract(path,mePrep,myPos,3);
		
		    for (int i = 0; i < 3; i++) 
			    path[i] = path[i] * multiplier;
		
		    mathVecAdd(temp,myPos,path,3);

		    api.setPositionTarget(temp);
	}
}

void AvoidSolarFlares()
{
    if(nextFlare==1) 
    {
        game.turnOff();
        timeuntilturnon=0;
    }
    
    timeuntilturnon++;
    if(timeuntilturnon==3) game.turnOn();
}

//End page functions
//Begin page init
#define Chose_POI 0
#define TakePic_One 1
#define GO_TO_SHADOW 2

float myState[12];
float POI[3][3];
float initialPosition[3];
float origin[3];
float brakingPt[3];
float POILoc[3];
float facing[3];
float earth[3];
float uploadPos[3];

int time;
int state;
int bestPOI;
int nextFlare;
int memoryFilled;
int lastState;
int timeuntilturnon;

void init() 
{
	time=0;
	state=0;
	memset(origin,0,3*sizeof(float));
	earth[0]=0.64f;
	earth[1]=earth[2]=0.0f;
	uploadPos[0]=0.30f;
	uploadPos[2]=-0.15f;
	lastState=Chose_POI;
	api.getMyZRState(myState);
	memcpy(initialPosition,myState,3*sizeof(float));
	timeuntilturnon=4;
}
//End page init
//Begin page main
void loop() 
{
	int i;
	
	api.getMyZRState(myState);

	for (i=0; i<3; i++) game.getPOILoc(POI[i], i);
	
	memoryFilled=game.getMemoryFilled();
	
	nextFlare=game.getNextFlare();
	
	if (game.getFuelRemaining()==0) game.takePic(0);
	
	if (time%60==0&&state==TakePic_One) state=Chose_POI;
	
    if(time==0) myState[1]>0 ? uploadPos[1]=0.15f : uploadPos[1]=-0.15f ;

    if(!(myState[0]>0.0f&&myState[0]<0.64f&&myState[1]>-0.2f&&myState[1]<0.2f&&myState[2]>-0.2f&&myState[2]<0.2f))
	    AvoidSolarFlares();
    else api.setControlMode(CTRL_PD,CTRL_PID);

    if (time>=170) state=GO_TO_SHADOW;

    if (nextFlare<=17&&nextFlare!=-1) 
	    { 
	        if (lastState!=GO_TO_SHADOW) lastState=state;
                else lastState=Chose_POI;
		    state=GO_TO_SHADOW;
	    }

	switch (state) {
		case Chose_POI:
			{
			    float currentMinDist=distance(POI[0],initialPosition);
			    bestPOI=0; 
			    
			    for (i=1; i<3; i++)  
			    {
				    if (distance(POI[i],initialPosition)<currentMinDist) 
				    {
					    currentMinDist=distance(POI[1],initialPosition);
					    bestPOI=i;
				    }
			    }

			    memcpy(POILoc, POI[bestPOI], 3*sizeof(float));

			    memcpy(brakingPt, POILoc, 3*sizeof(float));

			    for (i=0; i<3; i++) 
			        brakingPt[i]=0.5*brakingPt[i]/mathVecMagnitude(brakingPt,3);

			    mathVecRotateToOptimal(brakingPt);
			    setPositionTarget(brakingPt,0.5);
			    mathVecSubtract(facing,origin,myState,3);
			    api.setAttitudeTarget(facing);

			    state=TakePic_One;

			break;
			}

		case TakePic_One:
			{
			    if(memoryFilled!=0) state = GO_TO_SHADOW;

			    setPositionTarget(brakingPt,0.5);
			    mathVecSubtract(facing,origin,myState,3);
			    api.setAttitudeTarget(facing);
			
			    if (game.alignLine(bestPOI))  game.takePic(bestPOI);

			break;
			}

		case GO_TO_SHADOW:
			{
			    setPositionTarget(uploadPos,0.8);
			    mathVecSubtract(facing,earth,myState,3);
			    api.setAttitudeTarget(facing);
			    
			    if (memoryFilled==0) state = lastState;
			        else game.uploadPic();
			        
			break;
			}
	}
	
	time++;
}
//End page main
